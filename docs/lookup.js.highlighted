<div class="highlight"><pre><span class="cm">/**</span>
<span class="cm"> * Lookup up utility that loads or creates controllers, views and models</span>
<span class="cm"> *</span>
<span class="cm"> * @module 72lions</span>
<span class="cm"> * @class Lookup</span>
<span class="cm"> * @namespace STL</span>
<span class="cm"> * @author Thodoris Tsiridis</span>
<span class="cm"> * @version 1.0</span>
<span class="cm"> */</span>
<span class="nx">STL</span><span class="p">.</span><span class="nx">Lookup</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">global</span><span class="p">)</span> <span class="p">{</span>

    <span class="cm">/**</span>
<span class="cm">     * An object holding all the different models</span>
<span class="cm">     *</span>
<span class="cm">     * @private</span>
<span class="cm">     * @type Object</span>
<span class="cm">     */</span>
    <span class="kd">var</span> <span class="nx">_models</span>         <span class="o">=</span> <span class="p">{};</span>

    <span class="cm">/**</span>
<span class="cm">     * An object holding all the different views</span>
<span class="cm">     *</span>
<span class="cm">     * @private</span>
<span class="cm">     * @type Object</span>
<span class="cm">     */</span>
    <span class="kd">var</span> <span class="nx">_views</span>          <span class="o">=</span> <span class="p">{};</span>

    <span class="cm">/**</span>
<span class="cm">     * An object holding all the different controllers</span>
<span class="cm">     *</span>
<span class="cm">     * @private</span>
<span class="cm">     * @type Object</span>
<span class="cm">     */</span>
    <span class="kd">var</span> <span class="nx">_controllers</span>    <span class="o">=</span> <span class="p">{};</span>

    <span class="cm">/**</span>
<span class="cm">     * Returns a controller with a specific name</span>
<span class="cm">     *</span>
<span class="cm">     * @param {Object} attributes The attributes that will be used to initialize the class</span>
<span class="cm">     * @param {String} attributes.type The class type</span>
<span class="cm">     * @param {String} attributes.id The unique id for this class</span>
<span class="cm">     * @returns A controller</span>
<span class="cm">     * @type STL.Controller.Base</span>
<span class="cm">     * @author Thodoris Tsiridis</span>
<span class="cm">     */</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">getController</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">attributes</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">className</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">model</span><span class="p">,</span> <span class="nx">controllerObj</span><span class="p">;</span>
        <span class="kd">var</span> <span class="nx">exists</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>

        <span class="nx">className</span> <span class="o">=</span> <span class="nx">attributes</span><span class="p">.</span><span class="nx">type</span> <span class="o">||</span> <span class="s1">&#39;Base&#39;</span><span class="p">;</span>
        <span class="nx">id</span> <span class="o">=</span> <span class="nx">attributes</span><span class="p">.</span><span class="nx">id</span> <span class="o">||</span> <span class="p">(</span><span class="s1">&#39;_id_&#39;</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">*</span><span class="mi">10000</span><span class="p">).</span><span class="nx">toString</span><span class="p">());</span>

        <span class="c1">// Check if there is an array with objects of className type</span>
        <span class="c1">// If not then create a new array</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">_controllers</span><span class="p">[</span><span class="nx">className</span><span class="p">]</span> <span class="o">||</span> <span class="o">!</span><span class="nx">$</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">_controllers</span><span class="p">[</span><span class="nx">className</span><span class="p">]))</span> <span class="p">{</span>
            <span class="nx">_controllers</span><span class="p">[</span><span class="nx">className</span><span class="p">]</span> <span class="o">=</span> <span class="p">[];</span>
        <span class="p">}</span>

        <span class="c1">// Loop through al the items in the array</span>
        <span class="c1">// to check if an item with this id already exists</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">_controllers</span><span class="p">[</span><span class="nx">className</span><span class="p">].</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">_controllers</span><span class="p">[</span><span class="nx">className</span><span class="p">][</span><span class="nx">i</span><span class="p">].</span><span class="nx">id</span> <span class="o">==</span> <span class="nx">id</span><span class="p">){</span>
                <span class="nx">exists</span> <span class="o">=</span> <span class="nx">i</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">if</span><span class="p">(</span><span class="nx">exists</span> <span class="o">===</span> <span class="o">-</span><span class="mi">1</span><span class="p">){</span>

            <span class="c1">// Check if the class that we want to load exists</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">STL</span><span class="p">.</span><span class="nx">Controller</span><span class="p">[</span><span class="nx">className</span><span class="p">]</span> <span class="o">!==</span> <span class="kc">undefined</span><span class="p">){</span>
                <span class="nx">controllerObj</span> <span class="o">=</span> <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">classType</span><span class="o">:</span> <span class="k">new</span> <span class="nx">STL</span><span class="p">.</span><span class="nx">Controller</span><span class="p">[</span><span class="nx">className</span><span class="p">]()};</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="c1">// Create a generic controller</span>
                <span class="nx">controllerObj</span> <span class="o">=</span> <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">classType</span><span class="o">:</span> <span class="k">new</span> <span class="nx">STL</span><span class="p">.</span><span class="nx">Controller</span><span class="p">.</span><span class="nx">Base</span><span class="p">()};</span>
            <span class="p">}</span>

            <span class="nx">_controllers</span><span class="p">[</span><span class="nx">className</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">controllerObj</span><span class="p">);</span>
            <span class="k">return</span> <span class="nx">controllerObj</span><span class="p">.</span><span class="nx">classType</span><span class="p">;</span>

        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>

            <span class="k">return</span> <span class="nx">_controllers</span><span class="p">[</span><span class="nx">className</span><span class="p">][</span><span class="nx">exists</span><span class="p">].</span><span class="nx">classType</span><span class="p">;</span>
        <span class="p">}</span>

    <span class="p">};</span>

    <span class="cm">/**</span>
<span class="cm">     * Returns a view with a specific name</span>
<span class="cm">     *</span>
<span class="cm">     * @param {Object} attributes The attributes that will be used to initialize the class</span>
<span class="cm">     * @param {String} attributes.type The class type</span>
<span class="cm">     * @param {String} attributes.id The unique id for this class</span>
<span class="cm">     * @returns A view</span>
<span class="cm">     * @type STL.View.Base</span>
<span class="cm">     * @author Thodoris Tsiridis</span>
<span class="cm">     */</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">getView</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">attributes</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">exists</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nx">viewObj</span><span class="p">,</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">className</span><span class="p">;</span>
        <span class="nx">className</span> <span class="o">=</span> <span class="nx">attributes</span><span class="p">.</span><span class="nx">type</span> <span class="o">||</span> <span class="s1">&#39;Base&#39;</span><span class="p">;</span>
        <span class="nx">id</span> <span class="o">=</span> <span class="nx">attributes</span><span class="p">.</span><span class="nx">id</span> <span class="o">||</span> <span class="p">(</span><span class="s1">&#39;_id_&#39;</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">*</span><span class="mi">10000</span><span class="p">).</span><span class="nx">toString</span><span class="p">());</span>

        <span class="c1">// Check if there is an array with objects of className type</span>
        <span class="c1">// If not then create a new array</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">_views</span><span class="p">[</span><span class="nx">className</span><span class="p">]</span> <span class="o">||</span> <span class="o">!</span><span class="nx">$</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">_views</span><span class="p">[</span><span class="nx">className</span><span class="p">]))</span> <span class="p">{</span>
            <span class="nx">_views</span><span class="p">[</span><span class="nx">className</span><span class="p">]</span> <span class="o">=</span> <span class="p">[];</span>
        <span class="p">}</span>

        <span class="c1">// Loop through al the items in the array</span>
        <span class="c1">// to check if an item with this id already exists</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">_views</span><span class="p">[</span><span class="nx">className</span><span class="p">].</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">_views</span><span class="p">[</span><span class="nx">className</span><span class="p">][</span><span class="nx">i</span><span class="p">].</span><span class="nx">id</span> <span class="o">==</span> <span class="nx">id</span><span class="p">){</span>
                <span class="nx">exists</span> <span class="o">=</span> <span class="nx">i</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">if</span><span class="p">(</span><span class="nx">exists</span> <span class="o">===</span> <span class="o">-</span><span class="mi">1</span><span class="p">){</span>

            <span class="nx">exists</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>

            <span class="c1">// Check if the class that we want to load exists</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">STL</span><span class="p">.</span><span class="nx">View</span><span class="p">[</span><span class="nx">className</span><span class="p">]</span> <span class="o">!==</span> <span class="kc">undefined</span><span class="p">){</span>
                <span class="nx">viewObj</span> <span class="o">=</span> <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">classType</span><span class="o">:</span> <span class="k">new</span> <span class="nx">STL</span><span class="p">.</span><span class="nx">View</span><span class="p">[</span><span class="nx">className</span><span class="p">]()};</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="nx">viewObj</span> <span class="o">=</span> <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">classType</span><span class="o">:</span> <span class="k">new</span> <span class="nx">STL</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">Base</span><span class="p">()};</span>
            <span class="p">}</span>

            <span class="nx">_views</span><span class="p">[</span><span class="nx">className</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">viewObj</span><span class="p">);</span>
            <span class="nx">viewObj</span><span class="p">.</span><span class="nx">classType</span><span class="p">.</span><span class="nx">preInitialize</span><span class="p">(</span><span class="nx">attributes</span><span class="p">);</span>
            <span class="k">return</span> <span class="nx">viewObj</span><span class="p">.</span><span class="nx">classType</span><span class="p">;</span>

        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">_views</span><span class="p">[</span><span class="nx">className</span><span class="p">][</span><span class="nx">exists</span><span class="p">].</span><span class="nx">classType</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">};</span>

    <span class="cm">/**</span>
<span class="cm">     * Returns a model with a specific name</span>
<span class="cm">     *</span>
<span class="cm">     * @param {Object} attributes The attributes that will be used to initialize the class</span>
<span class="cm">     * @param {String} attributes.type The class type</span>
<span class="cm">     * @param {String} attributes.id The unique id for this class</span>
<span class="cm">     * @param {Object} attributes.data The data of the model</span>
<span class="cm">     * @returns A model</span>
<span class="cm">     * @type STL.Model.Base</span>
<span class="cm">     * @author Thodoris Tsiridis</span>
<span class="cm">     */</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">getModel</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">attributes</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">exists</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nx">modelObj</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">modelData</span><span class="p">;</span>
        <span class="nx">modelData</span> <span class="o">=</span> <span class="nx">attributes</span><span class="p">.</span><span class="nx">data</span> <span class="o">||</span> <span class="p">{};</span>
        <span class="nx">name</span> <span class="o">=</span> <span class="nx">attributes</span><span class="p">.</span><span class="nx">type</span> <span class="o">||</span> <span class="s1">&#39;Base&#39;</span><span class="p">;</span>
        <span class="nx">id</span> <span class="o">=</span> <span class="nx">attributes</span><span class="p">.</span><span class="nx">id</span> <span class="o">||</span> <span class="p">(</span><span class="s1">&#39;_id_&#39;</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">*</span><span class="mi">10000</span><span class="p">).</span><span class="nx">toString</span><span class="p">());</span>

        <span class="c1">// Check if there is an array with objects of className type</span>
        <span class="c1">// If not then create a new array</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">_models</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="o">||</span> <span class="o">!</span><span class="nx">$</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">_models</span><span class="p">[</span><span class="nx">name</span><span class="p">]))</span> <span class="p">{</span>
            <span class="nx">_models</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="p">[];</span>
        <span class="p">}</span>

        <span class="c1">// Loop through al the items in the array</span>
        <span class="c1">// to check if an item with this id already exists</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">_models</span><span class="p">[</span><span class="nx">name</span><span class="p">].</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">_models</span><span class="p">[</span><span class="nx">name</span><span class="p">][</span><span class="nx">i</span><span class="p">].</span><span class="nx">id</span> <span class="o">==</span> <span class="nx">id</span><span class="p">){</span>
                <span class="nx">exists</span> <span class="o">=</span> <span class="nx">i</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">if</span><span class="p">(</span><span class="nx">exists</span> <span class="o">===</span> <span class="o">-</span><span class="mi">1</span><span class="p">){</span>

            <span class="nx">exists</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>

            <span class="c1">// Check if the class that we want to load exists</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">STL</span><span class="p">.</span><span class="nx">Model</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="o">!==</span> <span class="kc">undefined</span><span class="p">){</span>
                <span class="nx">modelObj</span> <span class="o">=</span> <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">classType</span><span class="o">:</span> <span class="k">new</span> <span class="nx">STL</span><span class="p">.</span><span class="nx">Model</span><span class="p">[</span><span class="nx">name</span><span class="p">]()};</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="nx">modelObj</span> <span class="o">=</span> <span class="p">{</span><span class="nx">id</span><span class="o">:</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">classType</span><span class="o">:</span> <span class="k">new</span> <span class="nx">STL</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">Base</span><span class="p">()};</span>
            <span class="p">}</span>

            <span class="nx">_models</span><span class="p">[</span><span class="nx">name</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">modelObj</span><span class="p">);</span>

            <span class="nx">modelObj</span><span class="p">.</span><span class="nx">classType</span><span class="p">.</span><span class="nx">setName</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>
            <span class="nx">modelObj</span><span class="p">.</span><span class="nx">classType</span><span class="p">.</span><span class="nx">setId</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
            <span class="nx">modelObj</span><span class="p">.</span><span class="nx">classType</span><span class="p">.</span><span class="nx">setData</span><span class="p">(</span><span class="nx">modelData</span><span class="p">);</span>

            <span class="k">return</span> <span class="nx">modelObj</span><span class="p">.</span><span class="nx">classType</span><span class="p">;</span>

        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">_models</span><span class="p">[</span><span class="nx">name</span><span class="p">][</span><span class="nx">exists</span><span class="p">].</span><span class="nx">classType</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">};</span>

    <span class="k">return</span> <span class="k">this</span><span class="p">;</span>

<span class="p">}(</span><span class="nb">window</span><span class="p">);</span>
</pre></div>
