<div class="highlight"><pre><span class="cm">/**</span>
<span class="cm"> * Main Controller</span>
<span class="cm"> *</span>
<span class="cm"> * @module 72lions</span>
<span class="cm"> * @class Main</span>
<span class="cm"> * @namespace STL.Controller</span>
<span class="cm"> * @extends STL.Controller.Base</span>
<span class="cm"> * @author Thodoris Tsiridis</span>
<span class="cm"> * @version 1.0</span>
<span class="cm"> */</span>
<span class="nx">STL</span><span class="p">.</span><span class="nx">Controller</span><span class="p">.</span><span class="nx">Main</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>

    <span class="cm">/**</span>
<span class="cm">     * A reference to the navigation controller</span>
<span class="cm">     *</span>
<span class="cm">     * @private</span>
<span class="cm">     * @type STL.Controller.NaviMaingation</span>
<span class="cm">     * @default null</span>
<span class="cm">     */</span>
    <span class="kd">var</span> <span class="nx">navigationController</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>

    <span class="cm">/**</span>
<span class="cm">     * A reference to the sections manager controller</span>
<span class="cm">     *</span>
<span class="cm">     * @private</span>
<span class="cm">     * @type STL.Controller.SectionsManager</span>
<span class="cm">     * @default null</span>
<span class="cm">     */</span>
    <span class="kd">var</span> <span class="nx">sectionsManager</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>

    <span class="cm">/**</span>
<span class="cm">     * A reference to the footer controller</span>
<span class="cm">     *</span>
<span class="cm">     * @private</span>
<span class="cm">     * @type STL.Controller.Footer</span>
<span class="cm">     * @default null</span>
<span class="cm">     */</span>
    <span class="kd">var</span> <span class="nx">footerController</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>

    <span class="cm">/**</span>
<span class="cm">     * The initial state of the website</span>
<span class="cm">     *</span>
<span class="cm">     * @private</span>
<span class="cm">     * @type Object</span>
<span class="cm">     */</span>
    <span class="kd">var</span> <span class="nx">initialState</span> <span class="o">=</span> <span class="nx">Router</span><span class="p">.</span><span class="nx">getState</span><span class="p">();</span>

    <span class="cm">/**</span>
<span class="cm">     * Its true if there is a state object in the windows history. Chrome triggers a popstate on load so that is true</span>
<span class="cm">     *</span>
<span class="cm">     * @private</span>
<span class="cm">     * @type Boolean</span>
<span class="cm">     */</span>
    <span class="kd">var</span> <span class="nx">popped</span> <span class="o">=</span> <span class="p">(</span><span class="s1">&#39;state&#39;</span> <span class="k">in</span> <span class="nb">window</span><span class="p">.</span><span class="nx">history</span><span class="p">);</span>

    <span class="cm">/**</span>
<span class="cm">     * The page url upon loading</span>
<span class="cm">     *</span>
<span class="cm">     * @private</span>
<span class="cm">     * @type String</span>
<span class="cm">     */</span>
    <span class="kd">var</span> <span class="nx">initialURL</span> <span class="o">=</span> <span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="p">;</span>

    <span class="cm">/**</span>
<span class="cm">     * This function is executed right after the initialized function is called</span>
<span class="cm">     *</span>
<span class="cm">     * @author Thodoris Tsiridis</span>
<span class="cm">     */</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">postInitialize</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>

        <span class="nx">navigationController</span> <span class="o">=</span> <span class="nx">STL</span><span class="p">.</span><span class="nx">ControllerManager</span><span class="p">.</span><span class="nx">initializeController</span><span class="p">({</span>
            <span class="nx">type</span><span class="o">:</span><span class="s1">&#39;Navigation&#39;</span><span class="p">,</span>
            <span class="nx">id</span><span class="o">:</span><span class="s1">&#39;navigation&#39;</span><span class="p">,</span>
            <span class="nx">model</span><span class="o">:</span> <span class="nx">STL</span><span class="p">.</span><span class="nx">Lookup</span><span class="p">.</span><span class="nx">getModel</span><span class="p">({})</span>
        <span class="p">});</span>


        <span class="nx">sectionsManager</span>  <span class="o">=</span> <span class="nx">STL</span><span class="p">.</span><span class="nx">ControllerManager</span><span class="p">.</span><span class="nx">initializeController</span><span class="p">({</span>
            <span class="nx">type</span><span class="o">:</span><span class="s1">&#39;SectionsManager&#39;</span><span class="p">,</span>
            <span class="nx">id</span><span class="o">:</span><span class="s1">&#39;sectionsmanager&#39;</span><span class="p">,</span>
            <span class="nx">model</span><span class="o">:</span> <span class="nx">STL</span><span class="p">.</span><span class="nx">Lookup</span><span class="p">.</span><span class="nx">getModel</span><span class="p">({})</span>
        <span class="p">});</span>

        <span class="nx">sectionsManager</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;onSectionLoaded&#39;</span><span class="p">,</span> <span class="nx">onSectionLoaded</span><span class="p">);</span>
        <span class="nx">sectionsManager</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;onChangeSectionDispatched&#39;</span><span class="p">,</span> <span class="nx">onChangeSectionDispatched</span><span class="p">);</span>

        <span class="nx">footerController</span>  <span class="o">=</span> <span class="nx">STL</span><span class="p">.</span><span class="nx">ControllerManager</span><span class="p">.</span><span class="nx">initializeController</span><span class="p">({</span>
            <span class="nx">type</span><span class="o">:</span><span class="s1">&#39;Footer&#39;</span><span class="p">,</span>
            <span class="nx">id</span><span class="o">:</span><span class="s1">&#39;Footer&#39;</span><span class="p">,</span>
            <span class="nx">model</span><span class="o">:</span> <span class="nx">STL</span><span class="p">.</span><span class="nx">Lookup</span><span class="p">.</span><span class="nx">getModel</span><span class="p">({</span>
               <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;Footer&#39;</span><span class="p">,</span>
               <span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;footter&#39;</span>
            <span class="p">})</span>
        <span class="p">});</span>

        <span class="nx">onPopPushEvent</span><span class="p">(</span><span class="nx">initialState</span><span class="p">);</span>

        <span class="nx">Router</span><span class="p">.</span><span class="nx">registerForEvent</span><span class="p">(</span><span class="s1">&#39;pop&#39;</span><span class="p">,</span> <span class="nx">onPopPushEvent</span><span class="p">);</span>
        <span class="nx">Router</span><span class="p">.</span><span class="nx">registerForEvent</span><span class="p">(</span><span class="s1">&#39;push&#39;</span><span class="p">,</span> <span class="nx">onPopPushEvent</span><span class="p">);</span>

    <span class="p">};</span>

    <span class="cm">/**</span>
<span class="cm">     * Triggered when we have a pop or push event</span>
<span class="cm">     *</span>
<span class="cm">     * @private</span>
<span class="cm">     * @param {Object} state The state object</span>
<span class="cm">     * @author Thodoris Tsiridis</span>
<span class="cm">     */</span>
    <span class="kd">var</span> <span class="nx">onPopPushEvent</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">state</span><span class="p">){</span>
        <span class="kd">var</span> <span class="nx">initialPop</span><span class="p">,</span> <span class="nx">sectionName</span><span class="p">;</span>

        <span class="c1">// Catch page reload pop event that happens in some browsers</span>
        <span class="c1">// and disregard it</span>
        <span class="nx">initialPop</span> <span class="o">=</span> <span class="o">!</span><span class="nx">popped</span> <span class="o">&amp;&amp;</span> <span class="nx">location</span><span class="p">.</span><span class="nx">href</span> <span class="o">==</span> <span class="nx">initialURL</span><span class="p">;</span>
        <span class="nx">popped</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
        <span class="c1">//alert(initialPop + &quot;, &quot; + popped);</span>
        <span class="c1">//if ( initialPop ) return;</span>

        <span class="c1">// Clean memory</span>
        <span class="nx">initialPop</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
        <span class="nx">initialState</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>

        <span class="nx">sectionName</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>

        <span class="c1">// If the pathSegments are undefined then that</span>
        <span class="c1">// means that Home menu item is selected</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">state</span><span class="p">.</span><span class="nx">pathSegments</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">){</span>

            <span class="nx">navigationController</span><span class="p">.</span><span class="nx">getView</span><span class="p">().</span><span class="nx">selectNavigationItem</span><span class="p">(</span><span class="s1">&#39;blog&#39;</span><span class="p">);</span>

            <span class="c1">// Change the section</span>
            <span class="nx">changeSection</span><span class="p">();</span>

        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>

            <span class="k">if</span><span class="p">(</span><span class="nx">state</span><span class="p">.</span><span class="nx">pathSegments</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span>

                <span class="c1">// Select a specific menu item</span>
                <span class="nx">navigationController</span><span class="p">.</span><span class="nx">getView</span><span class="p">().</span><span class="nx">selectNavigationItem</span><span class="p">(</span><span class="nx">state</span><span class="p">.</span><span class="nx">pathSegments</span><span class="p">[</span><span class="nx">state</span><span class="p">.</span><span class="nx">pathSegments</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]);</span>

                <span class="c1">// Change the section</span>
                <span class="nx">changeSection</span><span class="p">(</span><span class="nx">state</span><span class="p">);</span>

            <span class="p">}</span>

        <span class="p">}</span>

        <span class="c1">// Clean memory</span>
        <span class="nx">sectionName</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">};</span>

    <span class="cm">/**</span>
<span class="cm">     * Responsible for telling the sectionsManager to change section</span>
<span class="cm">     *</span>
<span class="cm">     * @private</span>
<span class="cm">     * @param {Object} state The path of the section that we want to show</span>
<span class="cm">     * @author Thodoris Tsiridis</span>
<span class="cm">     */</span>
    <span class="kd">var</span> <span class="nx">changeSection</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">state</span><span class="p">){</span>
        <span class="nx">sectionsManager</span><span class="p">.</span><span class="nx">showSectionWithName</span><span class="p">(</span><span class="nx">state</span><span class="p">);</span>
    <span class="p">};</span>

    <span class="kd">var</span> <span class="nx">onSectionLoaded</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
        <span class="nx">footerController</span><span class="p">.</span><span class="nx">show</span><span class="p">();</span>
    <span class="p">};</span>

    <span class="kd">var</span> <span class="nx">onChangeSectionDispatched</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
        <span class="nx">footerController</span><span class="p">.</span><span class="nx">hide</span><span class="p">();</span>
    <span class="p">};</span>
<span class="p">};</span>

<span class="nx">STL</span><span class="p">.</span><span class="nx">Controller</span><span class="p">.</span><span class="nx">Main</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">STL</span><span class="p">.</span><span class="nx">Controller</span><span class="p">.</span><span class="nx">Base</span><span class="p">();</span>
</pre></div>
