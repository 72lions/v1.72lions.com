<div class="highlight"><pre><span class="cm">/**</span>
<span class="cm"> * Simulates a display object just like in AS3</span>
<span class="cm"> *</span>
<span class="cm"> * @module 72lions</span>
<span class="cm"> * @class Router</span>
<span class="cm"> * @author Thodoris Tsiridis</span>
<span class="cm"> * @version 1.0</span>
<span class="cm"> */</span>

<span class="kd">var</span> <span class="nx">CanvasDisplayObject</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>

    <span class="kd">var</span> <span class="nx">_children</span> <span class="o">=</span> <span class="p">[];</span>

    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">y</span>  <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">rotation</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">scaleX</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">scaleY</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">visible</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">alpha</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">extra</span> <span class="o">=</span> <span class="p">{};</span>

    <span class="cm">/**</span>
<span class="cm">     * It is set to true the first time we get a popstate</span>
<span class="cm">     *</span>
<span class="cm">     * @private</span>
<span class="cm">     * @type ST.CanvasDisplayObject</span>
<span class="cm">     * @default null</span>
<span class="cm">     */</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">parent</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>

    <span class="cm">/**</span>
<span class="cm">     * Adds a child to the display object</span>
<span class="cm">     *</span>
<span class="cm">     * @param {CanvasDisplayObject} child The display object to add as a child</span>
<span class="cm">     * @author Thodoris Tsiridis</span>
<span class="cm">     */</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">addChild</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">child</span><span class="p">)</span> <span class="p">{</span>

        <span class="c1">//Check if the child doesn&#39;t already exist</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">_children</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">child</span><span class="p">)</span> <span class="o">===</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>

            <span class="c1">//Check if the child already has a parent</span>
            <span class="k">if</span><span class="p">(</span> <span class="nx">child</span><span class="p">.</span><span class="nx">parent</span> <span class="o">!==</span> <span class="kc">null</span> <span class="p">)</span> <span class="p">{</span>

                <span class="c1">//If it already has a parent then remove it from it&#39;s parent</span>
                <span class="nx">child</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span> <span class="nx">child</span> <span class="p">);</span>

            <span class="p">}</span>

            <span class="c1">//Set the parent of the child</span>
            <span class="nx">child</span><span class="p">.</span><span class="nx">parent</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>

            <span class="c1">//Push the child in the array</span>
            <span class="nx">_children</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span> <span class="nx">child</span> <span class="p">);</span>

        <span class="p">}</span>

    <span class="p">};</span>
    <span class="cm">/**</span>
<span class="cm">     * Removes a child</span>
<span class="cm">     *</span>
<span class="cm">     * @param {CanvasDisplayObject} child  The display object to remove</span>
<span class="cm">     * @author Thodoris Tsiridis</span>
<span class="cm">     */</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">removeChild</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">child</span><span class="p">)</span> <span class="p">{</span>

        <span class="kd">var</span> <span class="nx">childIndex</span> <span class="o">=</span> <span class="nx">_children</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span> <span class="nx">child</span> <span class="p">);</span>

        <span class="c1">//Check the child index</span>
        <span class="k">if</span> <span class="p">(</span>  <span class="nx">childIndex</span> <span class="o">!==</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">)</span> <span class="p">{</span>

            <span class="nx">child</span><span class="p">.</span><span class="nx">parent</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>

            <span class="c1">//Remove the child from the children array</span>
            <span class="nx">_children</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span> <span class="nx">childIndex</span><span class="p">,</span> <span class="mi">1</span> <span class="p">);</span>

        <span class="p">}</span>
    <span class="p">};</span>
    <span class="cm">/**</span>
<span class="cm">     * Returns an array with all the children</span>
<span class="cm">     *</span>
<span class="cm">     * @returns {Array} The array with all the children</span>
<span class="cm">     * @author Thodoris Tsiridis</span>
<span class="cm">     */</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">getChildren</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">_children</span><span class="p">;</span>
    <span class="p">};</span>
    <span class="cm">/**</span>
<span class="cm">     * Updates the object</span>
<span class="cm">     *</span>
<span class="cm">     * @param {CanvasContext} ctx The context on which everything will be drawn</span>
<span class="cm">     * @author Thodoris Tsiridis</span>
<span class="cm">     */</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">update</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span> <span class="p">{</span>

        <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">visible</span> <span class="o">!==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>

            <span class="c1">//Save the current translation, rotation</span>
            <span class="nx">ctx</span><span class="p">.</span><span class="nx">save</span><span class="p">();</span>

            <span class="c1">//Translate Scale and Rotate</span>
            <span class="nx">ctx</span><span class="p">.</span><span class="nx">translate</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span>
            <span class="nx">ctx</span><span class="p">.</span><span class="nx">scale</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">scaleX</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">scaleY</span><span class="p">);</span>
            <span class="nx">ctx</span><span class="p">.</span><span class="nx">rotate</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">);</span>
            <span class="nx">ctx</span><span class="p">.</span><span class="nx">globalAlpha</span> <span class="o">=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nx">globalAlpha</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">alpha</span><span class="p">;</span>

            <span class="k">this</span><span class="p">.</span><span class="nx">draw</span><span class="p">();</span>

            <span class="c1">//Invoke the update function for each child</span>
            <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

            <span class="k">while</span><span class="p">(</span><span class="nx">d</span> <span class="o">&lt;</span> <span class="nx">_children</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>

                <span class="nx">_children</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">update</span><span class="p">(</span><span class="nx">ctx</span><span class="p">);</span>

                <span class="nx">d</span><span class="o">++</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="c1">//Restore the translation, rotation</span>
            <span class="nx">ctx</span><span class="p">.</span><span class="nx">restore</span><span class="p">();</span>

            <span class="nx">d</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>

        <span class="p">}</span>
    <span class="p">};</span>
<span class="p">};</span>

<span class="cm">/**</span>
<span class="cm"> * Generic function for overwritting and adding the your code</span>
<span class="cm"> */</span>
<span class="nx">CanvasDisplayObject</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">draw</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>

<span class="p">};</span>
</pre></div>
